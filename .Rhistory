group_by(variable) %>%
summarise(avg=mean(value)) %>%
arrange(desc(avg)) %>%
head(5)
top5
p1 = ggplot(data = top5, aes(x=reorder(variable, -avg), y =avg)) + geom_col(fill="#56B4E9", colour="black", stat="identity") + geom_text(aes(label=round(avg, digits = 2)), vjust=0) +
labs(x="Movie", y="Average Ranking",
title="Frequency of Rating per Movie") + theme(axis.text.x = element_text(angle = 45, hjust = 1))
p1
#The top rated movie by mean in this dataset is 'The Shawshank Redemption' followed by 'Star Wars IV - A New Hope' and 'Blade Runner'.
#First we remove NA's and store them then in a new object "temp""
temp = critics1 %>%
na.omit()
#create a new variable (rank) for movies that are >=4 stars (rank = A).The rest of the movies with less good ratings are assigned rank "B".
temp = temp %>%
mutate(rank = ifelse(value >= 4, "A", "B"))
temp$rank = factor(temp$rank)
top5dist= temp %>%
group_by(variable, rank) %>%
summarise(n = n()) %>%
arrange(desc(n)) %>%
mutate(totpcnt = n/sum(n)) %>%
filter(rank=="A") %>%
arrange(desc(totpcnt)) %>%
head(5)
top5dist
p2 = ggplot(data = top5dist, aes(x= reorder(variable, -totpcnt), y=totpcnt)) + labs(x="Top Rated Movies", y="Cumulative Distribution",
title="Cumulative Distribution of Top Movies") + geom_point(colour = "blue", size = 5) + scale_colour_gradient(low = "blue") + theme(axis.text.x = element_text(angle = 45, hjust = 1)) + geom_text(aes(label=round(totpcnt, digits=2)),hjust=1.5, vjust=0.5)
p2
#The plot illustrates the top 5 movies by rating distribution: 'The Shawshank Redemption', 'Star Wars IV - A New Hope', 'Gladiator', 'Blade Runner' and 'The Silence of the Lambs'.
top5Quant= temp %>%
group_by(variable) %>%
summarise(n = n()) %>%
arrange(desc(n)) %>%
head(5)
top5Quant
#Just for fun: a plot visualising rating frequencies
p3 = ggplot(data = top5Quant, aes(x=reorder(variable, -n), y =n)) + geom_col(fill="#F0E442", colour="black") +
labs(x="Movie", y="Rating Frequency",
title="Frequency of Rating per Movie") + theme(axis.text.x = element_text(angle = 45, hjust = 1)) + geom_text(aes(label=n, vjust=0))
p3
#Toystory has been rated most often followed by 'The Silence of the Lambs' and 'Star Wars IV - A New Hope'. We will later see in a bigger dataset (MovieLens) that such pattern does not repeat.
#recode na's into 0
critics[is.na(critics)] <- 0
#filter those users that watched Star Wars New Hope only
SW = critics %>%
mutate(watchedSW = (ifelse(Star.Wars.IV...A.New.Hope >=1,  "1", "0"))) %>%
filter(watchedSW == 1)
#transform dataframe into long format
rules <- melt(SW, id=(c("User")))
rules= as.data.frame(rules)
#get instances where user watched Star Wars New Hope
instances = sum(rules$variable=="Star.Wars.IV...A.New.Hope")
#extract ratios and association rules
temp = rules %>%
filter(value!=0 & variable!="Star.Wars.IV...A.New.Hope" & variable!="watchedSW") %>%
group_by(variable) %>%
summarise(rule = n()/instances) %>%
arrange(desc(rule)) %>%
head(5)
temp
#plot
p4 = ggplot(data = temp, aes(x=reorder(variable, -rule), y =rule)) + geom_col(fill="#3FDD79", colour="black") +
labs(x="Movie", y="Occurences associated with Star Wars IV",
title="People who watched Star Wars IV also watched..") + theme(axis.text.x = element_text(angle = 45, hjust = 1)) + geom_text(aes(label=round(rule, digits = 2), vjust=0))
p4
#People who watched Star Wars also liked to watchd Toy Story followed by Star Wars (Return of Jedi) and Silence of the Lambs.
#filter those users that watched and liked Babe (rating >= 4)
Babe = critics %>%
mutate(watchedB = (ifelse(Babe >=1,  1, 0))) %>%
mutate(likedB = (ifelse(Babe >= 4, 1, 0))) %>%
filter(likedB == 1)
#transform dataframe into long format
rules1 <- melt(Babe, id=(c("User")))
rules1 = as.data.frame(rules1)
#extract average ratings for other liked movies
temp = rules1 %>%
filter(value != 0 & variable!= "Babe") %>%
group_by(variable) %>%
summarise(ravg = mean(value)) %>%
arrange(desc(ravg)) %>%
head(5)
temp
#plot
p5 = ggplot(data = temp, aes(x=reorder(variable, -ravg), y =ravg)) + geom_col(fill="#CD0D9C", colour="black") +
labs(x="Movie", y="Average Rating of Movie",
title="People who watched Babe also watched..") + theme(axis.text.x = element_text(angle = 45, hjust = 1)) + geom_text(aes(label=round(ravg, digits = 2), vjust=0))
p5
#People who watched babe also watched 5.000, 'Pulp.Fiction' and 'Groundhog.Day' in all instances. It would be interesting to investigate if there are correlations between those movies. In order to do so we would, however, need to work with a bigger sample size to make sure that this sequence is not only a coincidence.
lens = read.csv("MovieDatasetPrepared.csv")
#Remove the timestamp column since it is irrelevant
drops <- c("timestamp")
lens[ , !(names(lens) %in% drops)]
#Call summary stats
summary = summary(lens)
#Transform features
lens$rating = factor(lens$rating)
library(reshape)
lens <- melt(lens, id=(c("rating", "title", "userId")))
lens = as.data.frame(lens)
##get frequencies of col d
lens.summary<-table(lens$rating)
lens.summary= as.data.frame(lens.summary)
#plot the frequency of ratings
p6 = ggplot(data = lens.summary, aes(x=Var1, -Freq, y=Freq)) + geom_col(fill="#0DBACD", colour="black") +
labs(x="Rating", y="Frequency",
title="Distribution of Ratings") + theme(axis.text.x = element_text(angle = 45, hjust = 1))
p6
#The most frequent rating Value that is awarded by users is 4 followed by 5. Users seldomly award movies with ratings that are less than two. It can be assumed that people barely watch "bad" movies til the end and give them ratings.
movieratings5 = lens %>%
select(title, rating) %>%
group_by(title) %>%
summarise(n = n()) %>%
arrange(desc(n)) %>%
head(5)
movieratings5
p1 = ggplot(data = movieratings5, aes(x=reorder(title, -n), y =n)) + geom_col(fill="#56B4E9", colour="black", stat="identity") + geom_text(aes(label=round(n, digits = 2)), vjust=0) +
labs(x="Movie", y="Average Ranking",
title="Frequency of Rating per Movie") + theme(axis.text.x = element_text(angle = 45, hjust = 1))
p1
#temp = gather(movieratings, key = movieratings$title, rating = movieratings$value, na.rm = F, convert = F, factor_key = F)
movieratings = lens %>%
select(title, rating) %>%
group_by(title) %>%
filter(rating == c("4", "4.5", "5")) %>%
summarise(goodmovies = n()) %>%
arrange(desc(goodmovies)) %>%
head(5)
movieratings
p2 = ggplot(data = movieratings, aes(x=reorder(title, -goodmovies), y =goodmovies)) + geom_col(fill="#56B4E9", colour="black") +
labs(x="Movie", y="Average Ranking",
title="Frequency of Good rated Movies") + theme(axis.text.x = element_text(angle = 45, hjust = 1))
p2
#"Star Wars: Episode IV - A New Hope" has been rated as good movie most often and almost twice as often as Shawshank Redemption which comes second in the row. However, it needs to be mentioned that "Star Wars: Episode IV - A New Hope" is also the movie that has been rated the most often, almost 3 times more than the second most popular movie.
#recode na's into 0
lens[is.na(lens)] <- 0
#filter those users that watched Shawshank Redemption
SW = lens %>%
select(title, rating) %>%
mutate(watchedSR = (ifelse("Shawshank Redemption, The (1994)" >=1,  "1", "0"))) %>%
filter(watchedSR == 1)
#get instances where user watched Shawshank Redemption
instances = sum(SW$title=="Shawshank Redemption, The (1994)")
#extract ratios and association rules
assoc = SW %>%
filter(rating !=0 & title!="Shawshank Redemption, The (1994)" & title!="watchedSR") %>%
group_by(title) %>%
summarise(rule = n()/instances) %>%
arrange(desc(rule)) %>%
head(5)
assoc
#plot
p7 = ggplot(data = assoc, aes(x=reorder(title, -rule), y =rule)) + geom_col(fill="#3FDD79", colour="black") +
labs(x="Movie", y="Occurences associated with Shawshank Redemption",
title="People who watched Shawshank Redemption IV also watched..") + theme(axis.text.x = element_text(angle = 45, hjust = 1)) + geom_text(aes(label=round(rule, digits = 2), vjust=0))
p7
#People who liked Seven mostly also liked Star Wars, Seven and Groundhog Day. Though, it needs to be highlighted that Star Wars is by far most watched for those who also watched Shawshank Redemption.
#extract ratings that are higher than 4 for users that watched Seven
temp = lens %>%
select(rating, title) %>%
group_by(title) %>%
filter(rating != is.na(rating) | title== "Seven (a.k.a. Se7en) (1995)") %>%
filter(rating == c("4", "4.5", "5")) %>%
filter(!title=="Seven (a.k.a. Se7en) (1995)") %>%
summarise(goodmovies = n()) %>%
arrange(desc(goodmovies)) %>%
head(7)
temp
#plot
p6 = ggplot(data = temp, aes(x=reorder(title, -goodmovies), y =goodmovies)) + geom_col(fill="#CD0D9C", colour="black") +
labs(x="Movie", y="Frequency of movie",
title="People who liked Seven also liked..") + theme(axis.text.x = element_text(angle = 45, hjust = 1))
p6
#People who liked Seven mostly also liked Star Wars, Shawshank Redemption, Pulp Fiction, Groundhog Day, Amelie and Big Lebowski.
#extract ratings that are higher than 4 for users that watched Seven
temp = lens %>%
select(rating, title) %>%
group_by(title) %>%
filter(rating != is.na(rating) | title== "Seven (a.k.a. Se7en) (1995)") %>%
filter(rating == c("4", "4.5", "5")) %>%
filter(!title=="Seven (a.k.a. Se7en) (1995)") %>%
summarise(goodmovies = n()) %>%
arrange(desc(goodmovies)) %>%
head(7)
temp
#plot
p6 = ggplot(data = temp, aes(x=reorder(title, -goodmovies), y =goodmovies)) + geom_col(fill="#CD0D9C", colour="black") +
labs(x="Movie", y="Frequency of movie",
title="People who liked Seven also liked..") + theme(axis.text.x = element_text(angle = 45, hjust = 1))
p6
#People who liked Seven mostly also liked Star Wars, Shawshank Redemption, Pulp Fiction, Groundhog Day, Amelie and Big Lebowski.
library(dplyr)
library(data.table)
library(ggplot2)
library(tidyverse)
setwd("/Users/natasha/Desktop/R/Lab1_Natasha_Savic")
#please insert your path here to load the data
critics = read.csv("critics.csv")
#First we need to transform the dataset into a long format and convert it into a dataframe. We will store this new dataframe as "critics1".
critics1 <- melt(critics, id=(c("User")))
critics1 = as.data.frame(critics1)
#Now we will use dplyr to select, group, summarise and arrange the top 10 movies
top5= critics1 %>%
select(variable, value) %>%
na.omit() %>%
group_by(variable) %>%
summarise(avg=mean(value)) %>%
arrange(desc(avg)) %>%
head(5)
top5
p1 = ggplot(data = top5, aes(x=reorder(variable, -avg), y =avg)) + geom_col(fill="#56B4E9", colour="black", stat="identity") + geom_text(aes(label=round(avg, digits = 2)), vjust=0) +
labs(x="Movie", y="Average Ranking",
title="Frequency of Rating per Movie") + theme(axis.text.x = element_text(angle = 45, hjust = 1))
p1
#The top rated movie by mean in this dataset is 'The Shawshank Redemption' followed by 'Star Wars IV - A New Hope' and 'Blade Runner'.
#First we remove NA's and store them then in a new object "temp""
temp = critics1 %>%
na.omit()
#create a new variable (rank) for movies that are >=4 stars (rank = A).The rest of the movies with less good ratings are assigned rank "B".
temp = temp %>%
mutate(rank = ifelse(value >= 4, "A", "B"))
temp$rank = factor(temp$rank)
top5dist= temp %>%
group_by(variable, rank) %>%
summarise(n = n()) %>%
arrange(desc(n)) %>%
mutate(totpcnt = n/sum(n)) %>%
filter(rank=="A") %>%
arrange(desc(totpcnt)) %>%
head(5)
top5dist
p2 = ggplot(data = top5dist, aes(x= reorder(variable, -totpcnt), y=totpcnt)) + labs(x="Top Rated Movies", y="Cumulative Distribution",
title="Cumulative Distribution of Top Movies") + geom_point(colour = "blue", size = 5) + scale_colour_gradient(low = "blue") + theme(axis.text.x = element_text(angle = 45, hjust = 1)) + geom_text(aes(label=round(totpcnt, digits=2)),hjust=1.5, vjust=0.5)
p2
#The plot illustrates the top 5 movies by rating distribution: 'The Shawshank Redemption', 'Star Wars IV - A New Hope', 'Gladiator', 'Blade Runner' and 'The Silence of the Lambs'.
top5Quant= temp %>%
group_by(variable) %>%
summarise(n = n()) %>%
arrange(desc(n)) %>%
head(5)
top5Quant
#Just for fun: a plot visualising rating frequencies
p3 = ggplot(data = top5Quant, aes(x=reorder(variable, -n), y =n)) + geom_col(fill="#F0E442", colour="black") +
labs(x="Movie", y="Rating Frequency",
title="Frequency of Rating per Movie") + theme(axis.text.x = element_text(angle = 45, hjust = 1)) + geom_text(aes(label=n, vjust=0))
p3
#Toystory has been rated most often followed by 'The Silence of the Lambs' and 'Star Wars IV - A New Hope'. We will later see in a bigger dataset (MovieLens) that such pattern does not repeat.
#recode na's into 0
critics[is.na(critics)] <- 0
#filter those users that watched Star Wars New Hope only
SW = critics %>%
mutate(watchedSW = (ifelse(Star.Wars.IV...A.New.Hope >=1,  "1", "0"))) %>%
filter(watchedSW == 1)
#transform dataframe into long format
rules <- melt(SW, id=(c("User")))
rules= as.data.frame(rules)
#get instances where user watched Star Wars New Hope
instances = sum(rules$variable=="Star.Wars.IV...A.New.Hope")
#extract ratios and association rules
temp = rules %>%
filter(value!=0 & variable!="Star.Wars.IV...A.New.Hope" & variable!="watchedSW") %>%
group_by(variable) %>%
summarise(rule = n()/instances) %>%
arrange(desc(rule)) %>%
head(5)
temp
#plot
p4 = ggplot(data = temp, aes(x=reorder(variable, -rule), y =rule)) + geom_col(fill="#3FDD79", colour="black") +
labs(x="Movie", y="Occurences associated with Star Wars IV",
title="People who watched Star Wars IV also watched..") + theme(axis.text.x = element_text(angle = 45, hjust = 1)) + geom_text(aes(label=round(rule, digits = 2), vjust=0))
p4
#People who watched Star Wars also liked to watchd Toy Story followed by Star Wars (Return of Jedi) and Silence of the Lambs.
#filter those users that watched and liked Babe (rating >= 4)
Babe = critics %>%
mutate(watchedB = (ifelse(Babe >=1,  1, 0))) %>%
mutate(likedB = (ifelse(Babe >= 4, 1, 0))) %>%
filter(likedB == 1)
#transform dataframe into long format
rules1 <- melt(Babe, id=(c("User")))
rules1 = as.data.frame(rules1)
#extract average ratings for other liked movies
temp = rules1 %>%
filter(value != 0 & variable!= "Babe") %>%
group_by(variable) %>%
summarise(ravg = mean(value)) %>%
arrange(desc(ravg)) %>%
head(5)
temp
#plot
p5 = ggplot(data = temp, aes(x=reorder(variable, -ravg), y =ravg)) + geom_col(fill="#CD0D9C", colour="black") +
labs(x="Movie", y="Average Rating of Movie",
title="People who watched Babe also watched..") + theme(axis.text.x = element_text(angle = 45, hjust = 1)) + geom_text(aes(label=round(ravg, digits = 2), vjust=0))
p5
#People who watched babe also watched 5.000, 'Pulp.Fiction' and 'Groundhog.Day' in all instances. It would be interesting to investigate if there are correlations between those movies. In order to do so we would, however, need to work with a bigger sample size to make sure that this sequence is not only a coincidence.
lens = read.csv("MovieDatasetPrepared.csv")
#Remove the timestamp column since it is irrelevant
drops <- c("timestamp")
lens[ , !(names(lens) %in% drops)]
#Call summary stats
summary = summary(lens)
#Transform features
lens$rating = factor(lens$rating)
summary = summary(lens)
summary
library(arm)
library(ggplot2)
library(plyr)
library(dplyr)
library(moments)
library(glmnet)
library(caret)
library(e1071)
library(tidyr)
library(mice)
library(MASS)
library(tree)
library(gbm)
library(VIM)
setwd('/Users/natasha/Desktop/ML II/Lab_1_Natasha_Nika')
df <- read.csv('train.csv', sep=',', header=T)
#Check Missing Values
#Now we will check the proportion of missing values plotting them
df_aggr = aggr(df, col=mdc(1:2), numbers=TRUE, sortVars=TRUE, labels=names(df), cex.axis=.7, gap=3, ylab=c("Proportion of missingness","Missingness Pattern"))
#take care of critical Columns manually, rest using mice
df$Alley = factor(df$Alley, levels=c(levels(df$Alley), "None")) #appending another level "None" to exisiting levels
df$Alley[is.na(df$Alley)] = "None" #replace NA's by "None"
# Fence : NA means "no fence"
df$Fence = factor(df$Fence, levels=c(levels(df$Fence), "No"))
df$Fence[is.na(df$Fence)] = "No"
# FireplaceQu : NA means "no fireplace"
df$FireplaceQu = factor(df$FireplaceQu, levels=c(levels(df$FireplaceQu), "No")) #factor the data
df$FireplaceQu[is.na(df$FireplaceQu)] = "No"
# MiscFeature : NA = "no misc feature"
df$MiscFeature = factor(df$MiscFeature, levels=c(levels(df$MiscFeature), "No"))
df$MiscFeature[is.na(df$MiscFeature)] = "No"
# PoolQC : data description says NA means "no pool"
df$PoolQC = factor(df$PoolQC, levels=c(levels(df$PoolQC), "No"))
df$PoolQC[is.na(df$PoolQC)] = "No"
#Factorize features. Some numerical features are actually really categories
df$MSSubClass <- as.factor(df$MSSubClass)
df$MoSold <- as.factor(df$MoSold)
imp = mice(df, pred=quickpred(df, minpuc = 0.25, exclude = c("PoolQC", "MiscFeature", "Alley", "Fence", "FireplaceQu", "LotFrontage", "SalePrice")), maxit = 1, method = 'cart')
summary(imp)
completedData <- complete(imp,1)
df_aggr = aggr(completedData, col=mdc(1:2), numbers=TRUE, sortVars=TRUE, labels=names(completedData), cex.axis=.7, gap=3, ylab=c("Proportion of missingness","Missingness Pattern"))
dft <- read.csv('test.csv', sep=',', header=T)
#Check Missing Values
dft_aggr = aggr(dft, col=mdc(1:2), numbers=TRUE, sortVars=TRUE, labels=names(dft), cex.axis=.7, gap=3, ylab=c("Proportion of missingness","Missingness Pattern"))
#take care of critical columns manually, rest using mice
dft$Alley = factor(dft$Alley, levels=c(levels(dft$Alley), "None")) #appending another level "None" to exisiting levels
dft$Alley[is.na(dft$Alley)] = "None" #replace NA's by "None"
# Fence : NA means "no fence"
dft$Fence = factor(dft$Fence, levels=c(levels(dft$Fence), "No"))
dft$Fence[is.na(dft$Fence)] = "No"
# FireplaceQu : NA means "no fireplace"
dft$FireplaceQu = factor(dft$FireplaceQu, levels=c(levels(dft$FireplaceQu), "No"))
dft$FireplaceQu[is.na(dft$FireplaceQu)] = "No"
# MiscFeature : NA = "no misc feature"
dft$MiscFeature = factor(dft$MiscFeature, levels=c(levels(dft$MiscFeature), "No"))
dft$MiscFeature[is.na(dft$MiscFeature)] = "No"
# PoolQC : data description says NA means "no pool"
dft$PoolQC = factor(dft$PoolQC, levels=c(levels(dft$PoolQC), "No"))
dft$PoolQC[is.na(dft$PoolQC)] = "No"
# LotFrontage : NA most likely means no lot frontage
dft$LotFrontage[is.na(dft$LotFrontage)] <- 0
#Factorize features. Some numerical features are actually categories
dft$MSSubClass <- as.factor(dft$MSSubClass)
dft$MoSold <- as.factor(dft$MoSold)
impt = mice(dft, pred=quickpred(dft, minpuc = 0.25, exclude = c("PoolQC", "MiscFeature", "Alley", "Fence", "FireplaceQu", "LotFrontage", "SalePrice")), maxit = 1, method = 'cart')
summary(impt)
completedDataTest <- complete(impt,1)
#An intermediate plot will show that utilities still contains NA's hence, we will remove them manually
df_aggr = aggr(completedDataTest, col=mdc(1:2), numbers=TRUE, sortVars=TRUE, labels=names(completedDataTest), cex.axis=.7, gap=3, ylab=c("Proportion of missingness","Missingness Pattern"))
# Remove the Utilities feature from the dataset (It only has one value)
completedData <- completedData[,-which(names(completedData) == "Utilities")]
completedDataTest <- completedDataTest[,-which(names(completedDataTest) == "Utilities")]
#Get data frame of SalePrice and log(SalePrice + 1) for plotting
dfl <- rbind(data.frame(version="log(price+1)",x=log(completedData$SalePrice + 1)), data.frame(version="price",x=completedData$SalePrice))
ggplot(data=dfl) +
facet_wrap(~version,ncol=2,scales="free_x") +
geom_histogram(aes(x=x), bins = 50)
# Log transform the target for official scoring
completedData$SalePrice <- log1p(completedData$SalePrice)
column_types <- sapply(names(completedData),function(x){class(completedData[[x]])})
numeric_columns <-names(column_types[column_types != "factor"])
# skew of each variable
skew <- sapply(numeric_columns,function(x){skewness(completedData[[x]],na.rm = T)})
# transform all variables above a threshold skewness.
#Testing different thresholds might lead to improved results
skew <- skew[skew > 0.75]
for(x in names(skew)) {
completedData[[x]] <- log(completedData[[x]] + 1)
}
column_types <- sapply(names(completedDataTest),function(x){class(completedDataTest[[x]])})
numeric_columns <-names(column_types[column_types != "factor"])
skew <- sapply(numeric_columns,function(x){skewness(completedDataTest[[x]],na.rm = T)})
skew <- skew[skew > 0.75]
for(x in names(skew)) {
completedDataTest[[x]] <- log(completedDataTest[[x]] + 1)
}
remove_outliers <- function(x, na.rm = TRUE, ...) {
qnt <- quantile(x, probs=c(.25, .75), na.rm = na.rm, ...)
H <- 1.5 * IQR(x, na.rm = na.rm)
y <- x
y
}
feature_classes <- sapply(names(completedData),function(x){class(completedData[[x]])})
num_feats <-names(feature_classes[feature_classes != "factor"])
categorical <- names(feature_classes[feature_classes == "factor"])
num_df <- completedData[num_feats]
categorical_df <- completedData[categorical]
completedData1 <- sapply(names(num_df),function(x){remove_outliers(num_df[[x]])})
completedData <- cbind(completedData1, categorical_df)
#for train set
completedData = completedData %>%
mutate(Refurb = ifelse(YearBuilt != YearRemodAdd, 1, 0))
#for test set
completedDataTest = completedDataTest %>%
mutate(Refurb = ifelse(YearBuilt != YearRemodAdd, 1, 0))
#check levels of month & year sold
levels(df$MoSold) # 1 - 12 indicating Jan - Dec
levels(df$YrSold) #2006 - 2010
#for train set
completedData = completedData %>%
mutate(Season = ifelse(YrSold  == 2006 & MoSold != c(1, 2, 11, 12), "A",
ifelse(YrSold  == 2006 & MoSold == c(1, 2, 11, 12),"B",
ifelse(YrSold  != c(2008, 2009) & MoSold != c(1, 2, 11, 12),"C",
ifelse(YrSold  == c(2008, 2009),"F", "D")))))
completedData$Season = as.factor(completedData$Season)
#for test set
completedDataTest = completedDataTest %>%
mutate(Season = ifelse(YrSold  == 2006 & MoSold != c(1, 2, 11, 12), "A",
ifelse(YrSold  == 2006 & MoSold == c(1, 2, 11, 12),"B",
ifelse(YrSold  != c(2008, 2009) & MoSold != c(1, 2, 11, 12),"C",
ifelse(YrSold  == c(2008, 2009),"F", "D")))))
completedDataTest$Season = as.factor(completedDataTest$Season)
#total floor area
completedData$FlrSF <- sum(completedData$X1stFlrSF, completedData$X2ndFlrSF)
#total number of full bathrooms
completedData$TotFullBath <- sum(completedData$BsmtFullBath, completedData$FullBath)
#total number of half bathrooms
completedData$TotSmallBath <- sum(completedData$BsmtHalfBath, completedData$HalfBath)
#recoding values
levels(completedData$CentralAir) <- c(0,1)
completedData$CentralAir <- as.numeric(as.character(completedData$CentralAir))
#converting to numeric
completedData$BsmntUnf <- completedData$BsmtUnfSF/completedData$TotalBsmtSF
#Unfinished basement area
completedData$BsmntUnf[is.na(completedData$BsmntUnf)] <- 0
#Unfinished house area
completedData$AreaUnf <- completedData$LowQualFinSF/completedData$X1stFlrSF+completedData$X2ndFlrSF
#Garage and house built at the same time
completedData$TotBuild <- completedData$GarageYrBlt-completedData$YearBuilt
#Total Completed House Area
completedData$TotArea <- sum(completedData$BsmtFinSF1, completedData$BsmtFinSF2, completedData$LotArea, completedData$TotalBsmtSF, completedData$GrLivArea)
#Age of the house when sold
completedData$Age <- completedData$YrSold-completedData$YearBuilt
#Years since remodeling until the house was sold
completedData$RemodSold <- completedData$YrSold-completedData$YearRemod
##Drop Id
completedData <- completedData[-1]
#total floor area
completedDataTest$FlrSF <- sum(completedDataTest$X1stFlrSF, completedDataTest$X2ndFlrSF)
#total number of full bathrooms
completedDataTest$TotFullBath <- sum(completedDataTest$BsmtFullBath, completedDataTest$FullBath)
#total number of half bathrooms
completedDataTest$TotSmallBath <- sum(completedDataTest$BsmtHalfBath, completedDataTest$HalfBath)
#recoding values
levels(completedDataTest$CentralAir) <- c(0,1)
completedDataTest$CentralAir <- as.numeric(as.character(completedDataTest$CentralAir))
#converting to numeric
completedDataTest$BsmntUnf <- completedDataTest$BsmtUnfSF/completedDataTest$TotalBsmtSF
#Unfinished basement area
completedDataTest$BsmntUnf[is.na(completedDataTest$BsmntUnf)] <- 0
#Unfinished house area
completedDataTest$AreaUnf <- completedDataTest$LowQualFinSF/completedDataTest$X1stFlrSF+completedDataTest$X2ndFlrSF
#Garage and house built at the same time
completedDataTest$TotBuild <- completedDataTest$GarageYrBlt-completedDataTest$YearBuilt
#Total Completed House Area
completedDataTest$TotArea <- sum(completedDataTest$BsmtFinSF1, completedDataTest$BsmtFinSF2, completedDataTest$LotArea, completedDataTest$TotalBsmtSF, completedDataTest$GrLivArea)
#Age of the house when sold
completedDataTest$Age <- completedDataTest$YrSold-completedDataTest$YearBuilt
#Years since remodeling until the house was sold
completedDataTest$RemodSold <- completedDataTest$YrSold-completedDataTest$YearRemod
##Drop Id
completedDataTest <- completedDataTest[-1]
yhat=predict(tree.house ,newdata=completedDataTest[-train ,])
house.test=completedData[-train,c("SalePrice")]
plot(yhat,house.test)
abline(0,1)
mean((yhat-house.test)^2)
library(corrplot)
#correlation matrix to get weights - We will create it for all users
mc_data <- completedData[,2:length(CompletedData)]
mc_data <- sapply(mc_data, as.numeric)
cormatrix=cor(mc_data,use="pairwise.complete.obs")
#additional visualising correlations in a heatmap
library(reshape2)
p4 = ggplot(data = cormatrix, aes(x=X1, y=X2, fill=value)) +
geom_tile()
p4
mc_data <- completedData[,2:length(CompletedData)]
mc_data <- completedData[,2:length(completedData)]
mc_data <- sapply(mc_data, as.numeric)
library(reshape2)
plot1 = ggplot(data = cormatrix, aes(x=X1, y=X2, fill=value)) +
geom_tile()
plot1
ggplot(data = cormatrix, aes(x=X1, y=X2, fill=value)) +
geom_tile()
cormatrix
cormatrix=cor(mc_data,use="pairwise.complete.obs")
